// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  firstName        String?
  lastName         String?
  email            String?           @unique
  emailVerified    DateTime?
  password         String?
  phone            String?           @unique
  image            String?
  responderProfile ResponderProfile?
  waitlistTicket   WaitlistTicket?
  referrals        WaitlistTicket[]  @relation("referral")
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ResponderProfile {
  id                    Int                     @id @default(autoincrement())
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String                  @unique
  classYear             String
  tags                  Tag[]
  ResponderFieldOfStudy ResponderFieldOfStudy[]
}

model Tag {
  id                Int                @id @default(autoincrement())
  value             String             @unique
  name              String
  responderProfiles ResponderProfile[]
}

model FieldOfStudy {
  id                Int                     @id @default(autoincrement())
  value             String                  @unique
  name              String
  responderProfiles ResponderFieldOfStudy[]
}

model ResponderFieldOfStudy {
  responderProfile   ResponderProfile @relation(fields: [responderProfileId], references: [id], onDelete: Cascade)
  responderProfileId Int
  fieldOfStudy       FieldOfStudy     @relation(fields: [fieldOfStudyId], references: [id])
  fieldOfStudyId     Int
  as                 String

  @@id([responderProfileId, fieldOfStudyId])
}

model WaitlistTicket {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  userId      String   @unique
  createdAt   DateTime @default(now())
  complete    Boolean  @default(false)
  invitedBy   User?    @relation("referral", fields: [invitedById], references: [id], onUpdate: NoAction, onDelete: NoAction)
  invitedById String?
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  body      String   @db.Text
}

model EmailList {
  id    Int    @id @default(autoincrement())
  email String
}

model ShortLink {
  id        Int      @id @default(autoincrement())
  value     String
  slug      String   @unique
  type      String?
  createdAt DateTime @default(now())

  @@index(slug)
}
